/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 laughing_cat_emoji.glb 
Author: Tom Johnson (https://sketchfab.com/Brigyon)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/laughing-cat-emoji-22bbcc672e274d05aa1fc812a4d3bb6f
Title: Laughing Cat Emoji
*/

import React, { forwardRef, Suspense } from 'react';
import { useGLTF } from '@react-three/drei';
import laughingcat from '../assets/models/laughing_cat_emoji.glb'

const LaughingCatModel = forwardRef((props, ref) => {
  const { currentColor } = props;
  const { nodes, materials } = useGLTF(laughingcat);

  return (
    <group ref={ref} {...props} dispose={null}>
      <group scale={0.1}>
        <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <mesh
            geometry={nodes.PM3D_Sphere3D4_1_PM3D_Sphere3D4_1_0.geometry}
            material={materials.PM3D_Sphere3D4_1}
            // material-color={currentColor}
          />
          <mesh
            geometry={nodes.PM3D_Sphere3D4_1_PM3D_Sphere3D4_0.geometry}
            material={materials.PM3D_Sphere3D4}
            // material-color={currentColor}
          />
          <mesh
            geometry={nodes.PM3D_Sphere3D4_1_PM3D_Sphere3D5_0.geometry}
            material={materials.PM3D_Sphere3D5}
            // material-color={currentColor}
          />
        </group>
        <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <mesh geometry={nodes.catemoji1_catemoji1_0.geometry} 
          material={materials.catemoji1}
          // material-color={currentColor}
          />
          <mesh geometry={nodes.catemoji1_catemoji1_0_1.geometry} material={materials.catemoji1}
          // material-color={currentColor}
          />
        </group>
        <mesh
          geometry={nodes.PM3D_Sphere3D1_1_PM3D_Sphere3D1_1001_0.geometry}
          material={materials['PM3D_Sphere3D1_1.001']}
          // material-color={currentColor}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
        <mesh
          geometry={nodes.PM3D_Sphere3D1_2_PM3D_Sphere3D1_2_0.geometry}
          material={materials.PM3D_Sphere3D1_2}
          // material-color={currentColor}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
        <mesh
          geometry={nodes.PM3D_Sphere3D1_PM3D_Sphere3D1001_0.geometry}
          material={materials['PM3D_Sphere3D1.001']}
          // material-color={currentColor}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
      </group>
    </group>
  );
});

LaughingCatModel.displayName = 'LaughingCatModel';

useGLTF.preload(laughingcat);

const LaughingCatModelWrapper = forwardRef((props, ref) => (
  <Suspense fallback={null}>
    <LaughingCatModel ref={ref} {...props} />
  </Suspense>
));

LaughingCatModelWrapper.displayName = 'LaughingCatModelWrapper';

export { LaughingCatModelWrapper as LaughingCatModel };